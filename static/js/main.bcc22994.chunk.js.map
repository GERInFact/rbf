{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","users","length","map","u","i","key","SearchBox","searchChange","type","placeholder","onChange","e","target","value","ErrorBoundry","state","hasError","this","children","err","info","setState","Component","App","robots","filteredRobots","getFilteredRobots","onSearchChange","searchField","filter","r","toLowerCase","includes","fetch","then","res","json","catch","console","log","message","React","connect","dispatch","event","payload","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.bcc22994.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card_img-container\">\r\n        <img\r\n          src={`https://robohash.org/${id}?200x200`}\r\n          alt=\"A random robot face\"\r\n          className=\"img-container_img\"\r\n        />\r\n      </div>\r\n      <div className=\"card_info\">\r\n        <h3 className=\"info_name\">{name || \"Tester\"}</h3>\r\n        <p className=\"info_email\">{email || \"test@test.com\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nimport \"./cardList.css\";\r\n\r\nconst CardList = (props) => {\r\n  const { users } = props;\r\n  return users.length ? (\r\n    <div className=\"cards\">\r\n      {users.map((u, i) => {\r\n        return <Card key={i} id={u.id} name={u.name} email={u.email} />;\r\n      })}\r\n    </div>\r\n  ) : <h2>Loading...</h2>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nconst SearchBox = (props) => {\r\n  const { searchChange } = props;\r\n  return (\r\n    <div className=\"search-box\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        className=\"search-box_input\"\r\n        onChange={(e) => searchChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h2>Oooops. That is not good</h2>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n\r\n  componentDidCatch(err, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoudry from \"../components/ErrorBoundry\";\r\nimport { setSearchField } from \"../Actions\";\r\n\r\nimport \"./app.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchField,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      robots: [],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const filteredRobots = this.getFilteredRobots();\r\n    const { onSearchChange } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <header className=\"header\">\r\n          <h1 className=\"header_title\">RBF</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n        </header>\r\n        <main className=\"main\">\r\n          <ErrorBoudry>\r\n            <CardList users={filteredRobots} />\r\n          </ErrorBoudry>\r\n        </main>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  getFilteredRobots() {\r\n    const { searchField } = this.props;\r\n    return this.state.robots.filter((r) =>\r\n      r.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((res) => res.json())\r\n      .then((res) => this.setState({ robots: res }))\r\n      .catch((err) => console.log(err.message));\r\n  }\r\n}\r\n\r\n//connect returns another function -> higher order function\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from \"./Constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from \"./Constants\";\r\n\r\nconst initialState = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots } from \"./Reducers\";\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}